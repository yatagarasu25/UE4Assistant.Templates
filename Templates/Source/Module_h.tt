<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".h" #>
<#@ parameter name="modulename" type="System.String" #>
<#@ parameter name="isprimary" type="System.Boolean" #>
#pragma once

#include "Modules/ModuleInterface.h"
#include "Modules/ModuleManager.h"



<# if (isprimary) { #>
<# } else { #>
class F<#= this.modulename #>Module : public IModuleInterface
{
public:
	static inline F<#= this.modulename #>Module& Get() { return FModuleManager::LoadModuleChecked<F<#= this.modulename #>Module>("<#= this.modulename #>"); }
	static inline bool IsAvailable() { return FModuleManager::Get().IsModuleLoaded("<#= this.modulename #>"); }

	/** IModuleInterface implementation */
	virtual void StartupModule() override;
	virtual void ShutdownModule() override;
};
<# } #>



struct F<#= this.modulename #>
{
	// Declare module static functions here
};
